diff --git a/src/Command/RandomSpellCommand.php b/src/Command/RandomSpellCommand.php
index 402f6cd8..aa7cb906 100644
--- a/src/Command/RandomSpellCommand.php
+++ b/src/Command/RandomSpellCommand.php
@@ -13,12 +13,9 @@ use Symfony\Component\Console\Style\SymfonyStyle;
 class RandomSpellCommand extends Command
 {
     protected static $defaultName = 'app:random-spell';
-    private $logger;
 
-    public function __construct(LoggerInterface $logger)
+    public function __construct(private LoggerInterface $logger)
     {
-        $this->logger = $logger;
-
         parent::__construct();
     }
 
diff --git a/src/Controller/AnswerController.php b/src/Controller/AnswerController.php
index 6b919f1a..50dab11d 100644
--- a/src/Controller/AnswerController.php
+++ b/src/Controller/AnswerController.php
@@ -37,7 +37,7 @@ class AnswerController extends BaseController
             'answer' => $answer->getId(),
         ]);
 
-        $data = json_decode($request->getContent(), true);
+        $data = json_decode($request->getContent(), true, 512, JSON_THROW_ON_ERROR);
         $direction = $data['direction'] ?? 'up';
 
         // use real logic here to save this to the database
diff --git a/src/Controller/QuestionController.php b/src/Controller/QuestionController.php
index 4a60ba5b..2a106ba8 100644
--- a/src/Controller/QuestionController.php
+++ b/src/Controller/QuestionController.php
@@ -16,13 +16,8 @@ use Symfony\Component\Routing\Annotation\Route;
 
 class QuestionController extends AbstractController
 {
-    private $logger;
-    private $isDebug;
-
-    public function __construct(LoggerInterface $logger, bool $isDebug)
+    public function __construct(private LoggerInterface $logger, private bool $isDebug)
     {
-        $this->logger = $logger;
-        $this->isDebug = $isDebug;
     }
 
     /**
diff --git a/src/DataFixtures/AppFixtures.php b/src/DataFixtures/AppFixtures.php
index b0418ef0..6c65601e 100644
--- a/src/DataFixtures/AppFixtures.php
+++ b/src/DataFixtures/AppFixtures.php
@@ -25,18 +25,14 @@ class AppFixtures extends Fixture
 
         TagFactory::createMany(100);
 
-        $questions = QuestionFactory::createMany(20, function () {
-            return [
-                'owner' => UserFactory::random(),
-            ];
-        });
-
-        QuestionTagFactory::createMany(100, function () {
-            return [
-                'tag' => TagFactory::random(),
-                'question' => QuestionFactory::random(),
-            ];
-        });
+        $questions = QuestionFactory::createMany(20, fn() => [
+            'owner' => UserFactory::random(),
+        ]);
+
+        QuestionTagFactory::createMany(100, fn() => [
+            'tag' => TagFactory::random(),
+            'question' => QuestionFactory::random(),
+        ]);
 
         QuestionFactory::new()
             ->unpublished()
@@ -44,16 +40,12 @@ class AppFixtures extends Fixture
             ->create()
         ;
 
-        AnswerFactory::createMany(100, function () use ($questions) {
-            return [
-                'question' => $questions[array_rand($questions)],
-            ];
-        });
-        AnswerFactory::new(function () use ($questions) {
-            return [
-                'question' => $questions[array_rand($questions)],
-            ];
-        })->needsApproval()->many(20)->create();
+        AnswerFactory::createMany(100, fn() => [
+            'question' => $questions[array_rand($questions)]
+        ]);
+        AnswerFactory::new(fn() => [
+            'question' => $questions[array_rand($questions)]
+        ])->needsApproval()->many(20)->create();
 
         $manager->flush();
     }
diff --git a/src/Entity/Answer.php b/src/Entity/Answer.php
index 4bae6102..f936762c 100644
--- a/src/Entity/Answer.php
+++ b/src/Entity/Answer.php
@@ -36,7 +36,7 @@ class Answer
     /**
      * @ORM\Column(type="integer")
      */
-    private $votes = 0;
+    private int $votes = 0;
 
     /**
      * @ORM\ManyToOne(targetEntity=Question::class, inversedBy="answers")
@@ -47,7 +47,7 @@ class Answer
     /**
      * @ORM\Column(type="string", length=15)
      */
-    private $status = self::STATUS_NEEDS_APPROVAL;
+    private string $status = self::STATUS_NEEDS_APPROVAL;
 
     public function getId(): ?int
     {
diff --git a/src/Entity/Question.php b/src/Entity/Question.php
index 414acc0a..82b1ba8b 100644
--- a/src/Entity/Question.php
+++ b/src/Entity/Question.php
@@ -48,7 +48,7 @@ class Question
     /**
      * @ORM\Column(type="integer")
      */
-    private $votes = 0;
+    private int $votes = 0;
 
     /**
      * @ORM\OneToMany(targetEntity=Answer::class, mappedBy="question", fetch="EXTRA_LAZY")
diff --git a/src/Entity/User.php b/src/Entity/User.php
index 6b639686..7d9d83ad 100644
--- a/src/Entity/User.php
+++ b/src/Entity/User.php
@@ -30,18 +30,18 @@ class User implements UserInterface
     /**
      * @ORM\Column(type="json")
      */
-    private $roles = [];
+    private array $roles = [];
 
     /**
      * @var string The hashed password
      * @ORM\Column(type="string")
      */
-    private $password;
+    private string $password;
 
     /**
      * @var string Non-mapped field
      */
-    private $plainPassword = null;
+    private ?string $plainPassword = null;
 
     /**
      * @ORM\Column(type="string", length=255)
@@ -56,7 +56,7 @@ class User implements UserInterface
     /**
      * @ORM\Column(type="boolean")
      */
-    private $isVerified = false;
+    private bool $isVerified = false;
 
     public function __construct()
     {
diff --git a/src/Factory/AnswerFactory.php b/src/Factory/AnswerFactory.php
index 56f4df66..8fbc4517 100644
--- a/src/Factory/AnswerFactory.php
+++ b/src/Factory/AnswerFactory.php
@@ -46,7 +46,7 @@ final class AnswerFactory extends ModelFactory
             'content' => self::faker()->text(),
             'username' => self::faker()->userName(),
             'createdAt' => self::faker()->dateTimeBetween('-1 year'),
-            'votes' => rand(-20, 50),
+            'votes' => random_int(-20, 50),
             'question' => QuestionFactory::new()->unpublished(),
             'status' => Answer::STATUS_APPROVED,
         ];
diff --git a/src/Factory/QuestionFactory.php b/src/Factory/QuestionFactory.php
index f5673372..74fd04ca 100644
--- a/src/Factory/QuestionFactory.php
+++ b/src/Factory/QuestionFactory.php
@@ -49,7 +49,7 @@ final class QuestionFactory extends ModelFactory
                 true
             ),
             'askedAt' => self::faker()->dateTimeBetween('-100 days', '-1 minute'),
-            'votes' => rand(-20, 50),
+            'votes' => random_int(-20, 50),
             'owner' => UserFactory::new(),
         ];
     }
diff --git a/src/Factory/UserFactory.php b/src/Factory/UserFactory.php
index 2bed85df..0353415e 100644
--- a/src/Factory/UserFactory.php
+++ b/src/Factory/UserFactory.php
@@ -8,6 +8,7 @@ use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
 use Zenstruck\Foundry\ModelFactory;
 use Zenstruck\Foundry\Proxy;
 use Zenstruck\Foundry\RepositoryProxy;
+use function Symfony\Component\String\s;
 
 /**
  * @extends ModelFactory<User>
@@ -29,13 +30,9 @@ use Zenstruck\Foundry\RepositoryProxy;
  */
 final class UserFactory extends ModelFactory
 {
-    private UserPasswordHasherInterface $userPasswordHasher;
-
-    public function __construct(UserPasswordHasherInterface $userPasswordHasher)
+    public function __construct(private UserPasswordHasherInterface $userPasswordHasher)
     {
         parent::__construct();
-
-        $this->userPasswordHasher = $userPasswordHasher;
     }
 
     protected function getDefaults(): array
diff --git a/src/Repository/UserRepository.php b/src/Repository/UserRepository.php
index aae14c07..287ca764 100644
--- a/src/Repository/UserRepository.php
+++ b/src/Repository/UserRepository.php
@@ -28,7 +28,7 @@ class UserRepository extends ServiceEntityRepository implements PasswordUpgrader
     public function upgradePassword(UserInterface $user, string $newHashedPassword): void
     {
         if (!$user instanceof User) {
-            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
+            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $user::class));
         }
 
         $user->setPassword($newHashedPassword);
diff --git a/src/Security/LoginFormAuthenticator.php b/src/Security/LoginFormAuthenticator.php
index cf029a66..de20765a 100644
--- a/src/Security/LoginFormAuthenticator.php
+++ b/src/Security/LoginFormAuthenticator.php
@@ -28,19 +28,8 @@ class LoginFormAuthenticator extends AbstractFormLoginAuthenticator implements P
 
     public const LOGIN_ROUTE = 'app_login';
 
-    private $session;
-    private $entityManager;
-    private $urlGenerator;
-    private $csrfTokenManager;
-    private $userPasswordHasher;
-
-    public function __construct(SessionInterface $session, EntityManagerInterface $entityManager, UrlGeneratorInterface $urlGenerator, CsrfTokenManagerInterface $csrfTokenManager, UserPasswordHasherInterface $userPasswordHasher)
+    public function __construct(private SessionInterface $session, private EntityManagerInterface $entityManager, private UrlGeneratorInterface $urlGenerator, private CsrfTokenManagerInterface $csrfTokenManager, private UserPasswordHasherInterface $userPasswordHasher)
     {
-        $this->session = $session;
-        $this->entityManager = $entityManager;
-        $this->urlGenerator = $urlGenerator;
-        $this->csrfTokenManager = $csrfTokenManager;
-        $this->userPasswordHasher = $userPasswordHasher;
     }
 
     public function supports(Request $request)
diff --git a/src/Security/Voter/QuestionVoter.php b/src/Security/Voter/QuestionVoter.php
index 4024ab9d..98e273e1 100644
--- a/src/Security/Voter/QuestionVoter.php
+++ b/src/Security/Voter/QuestionVoter.php
@@ -11,11 +11,8 @@ use Symfony\Component\Security\Core\User\UserInterface;
 
 class QuestionVoter extends Voter
 {
-    private Security $security;
-
-    public function __construct(Security $security)
+    public function __construct(private Security $security)
     {
-        $this->security = $security;
     }
 
     protected function supports(string $attribute, $subject): bool
@@ -41,13 +38,9 @@ class QuestionVoter extends Voter
         if ($this->security->isGranted('ROLE_ADMIN')) {
             return true;
         }
-
-        // ... (check conditions and return true to grant permission) ...
-        switch ($attribute) {
-            case 'EDIT':
-                return $user === $subject->getOwner();
-        }
-
-        return false;
+        return match ($attribute) {
+            'EDIT' => $user === $subject->getOwner(),
+            default => false,
+        };
     }
 }
diff --git a/src/Service/MarkdownHelper.php b/src/Service/MarkdownHelper.php
index 816a9e9a..fec28741 100644
--- a/src/Service/MarkdownHelper.php
+++ b/src/Service/MarkdownHelper.php
@@ -8,17 +8,8 @@ use Symfony\Contracts\Cache\CacheInterface;
 
 class MarkdownHelper
 {
-    private $markdownParser;
-    private $cache;
-    private $isDebug;
-    private $logger;
-
-    public function __construct(MarkdownParserInterface $markdownParser, CacheInterface $cache, bool $isDebug, LoggerInterface $mdLogger)
+    public function __construct(private MarkdownParserInterface $markdownParser, private CacheInterface $cache, private bool $isDebug, private LoggerInterface $logger)
     {
-        $this->markdownParser = $markdownParser;
-        $this->cache = $cache;
-        $this->isDebug = $isDebug;
-        $this->logger = $mdLogger;
     }
 
     public function parse(string $source): string
@@ -31,8 +22,6 @@ class MarkdownHelper
             return $this->markdownParser->transformMarkdown($source);
         }
 
-        return $this->cache->get('markdown_'.md5($source), function () use ($source) {
-            return $this->markdownParser->transformMarkdown($source);
-        });
+        return $this->cache->get('markdown_'.md5($source), fn() => $this->markdownParser->transformMarkdown($source));
     }
 }
diff --git a/src/Twig/MarkdownExtension.php b/src/Twig/MarkdownExtension.php
index 11c43f5b..5785dac5 100644
--- a/src/Twig/MarkdownExtension.php
+++ b/src/Twig/MarkdownExtension.php
@@ -8,11 +8,8 @@ use Twig\TwigFilter;
 
 class MarkdownExtension extends AbstractExtension
 {
-    private $markdownHelper;
-
-    public function __construct(MarkdownHelper $markdownHelper)
+    public function __construct(private MarkdownHelper $markdownHelper)
     {
-        $this->markdownHelper = $markdownHelper;
     }
 
     public function getFilters(): array
