WEBVTT

00:00:01.006 --> 00:00:03.446 align:middle
¡Exploremos algunas nuevas funciones!

00:00:03.636 --> 00:00:06.886 align:middle
Hay montones de ellas, y
ya hemos visto un montón.

00:00:07.516 --> 00:00:11.456 align:middle
No tengo tiempo para mostrarlo todo,
pero afortunadamente, ¡no lo necesito!

00:00:11.456 --> 00:00:17.596 align:middle
Si vas a https://symfony.com/blog, las
novedades están muy bien documentadas.

00:00:18.526 --> 00:00:20.256 align:middle
Haz clic en "Vivir al límite".

00:00:20.776 --> 00:00:24.456 align:middle
Aquí puedes ver las entradas del blog
que están clasificadas por cada versión.

00:00:24.916 --> 00:00:27.596 align:middle
Esta es una colección de entradas
de blog sobre las novedades

00:00:27.596 --> 00:00:31.346 align:middle
de Symfony 5.1, como el
nuevo sistema de seguridad.

00:00:32.176 --> 00:00:38.216 align:middle
Y... aquí hay posts sobre las novedades
de Symfony 5.3, o de la 5.4 a la 6.0.

00:00:38.976 --> 00:00:42.396 align:middle
Así que si quieres profundizar
y ver todas las novedades, están

00:00:42.586 --> 00:00:45.486 align:middle
muy bien documentadas en estos posts.

00:00:46.206 --> 00:00:50.406 align:middle
Las nuevas características que quiero mostrar ahora
tienen que ver con el componente del formulario.

00:00:51.126 --> 00:00:55.716 align:middle
Desde Symfony 5.3, tenemos una nueva y bonita característica
llamada Ordenación de los campos del formulario.

00:00:56.316 --> 00:00:59.816 align:middle
Si vas a la página de registro,
ésta muestra cuatro campos.

00:01:00.396 --> 00:01:05.186 align:middle
Abramos la plantilla para ello:
templates/registration/register.html.twig.

00:01:05.936 --> 00:01:08.026 align:middle
Estoy renderizando todos los campos a mano.

00:01:08.616 --> 00:01:15.346 align:middle
Reemplacemos esto por el muy perezoso
{{ form_widget(registrationForm) }}...

00:01:15.776 --> 00:01:20.126 align:middle
que simplemente vuelca todos los
campos en el orden en que se añaden.

00:01:20.826 --> 00:01:21.996 align:middle
Por desgracia...

00:01:22.406 --> 00:01:23.286 align:middle
ahora el formulario...

00:01:23.476 --> 00:01:24.826 align:middle
tiene un aspecto extraño.

00:01:25.376 --> 00:01:32.666 align:middle
Para solucionarlo, abre la clase del tipo de
formulario, que es src/Form/RegistrationFormType.php.

00:01:32.666 --> 00:01:36.096 align:middle
Cada campo tiene ahora una
opción llamada priority.

00:01:36.816 --> 00:01:37.806 align:middle
Vamos a añadirla.

00:01:38.516 --> 00:01:43.146 align:middle
Empezando por firstName, pasa null por
el tipo para que Symfony siga adivinando.

00:01:43.676 --> 00:01:48.886 align:middle
A continuación, pasa priority a 4, porque
quiero que éste sea el pr imer campo.

00:01:49.646 --> 00:01:55.116 align:middle
email debería ser el segundo campo, así que
pasa de nuevo null y establece su priority a 3.

00:01:55.876 --> 00:01:58.786 align:middle
Luego dale a plainPassword un priority de 2...

00:01:59.406 --> 00:02:03.056 align:middle
y finalmente pon agreeTerms a priority 1 .

00:02:03.976 --> 00:02:04.806 align:middle
Y ahora...

00:02:05.526 --> 00:02:07.256 align:middle
¡se ve muy bien!

00:02:07.926 --> 00:02:11.776 align:middle
Así que si quieres renderizar
perezosamente tus campos, puedes hacerlo...

00:02:12.046 --> 00:02:15.256 align:middle
y no tener que preocuparte de
que estén en un orden extraño.

00:02:16.066 --> 00:02:19.946 align:middle
Ya que estamos hablando de formularios,
abre el controlador de esta página:

00:02:20.246 --> 00:02:22.676 align:middle
src/Controller/RegistrationController.php.

00:02:22.676 --> 00:02:30.606 align:middle
En Symfony 5.3, cuando renderizas una plantilla
y pasas un formulario, ¡hay un nuevo atajo!

00:02:31.346 --> 00:02:34.216 align:middle
En lugar de render() di renderForm().

00:02:35.006 --> 00:02:40.116 align:middle
La única otra diferencia es que puedes
eliminar la llamada a ->createView().

00:02:40.646 --> 00:02:41.716 align:middle
¡Eso es todo!

00:02:42.276 --> 00:02:45.556 align:middle
este método renderForm()
es igual que render().

00:02:46.096 --> 00:02:52.736 align:middle
Sigue renderizando esta plantilla, y sigue pasando
cualquiera de estas variables a la plantilla.

00:02:53.546 --> 00:02:57.696 align:middle
Pero si alguna de las variables que
pasamos es un objeto "formulario",

00:02:58.036 --> 00:03:00.996 align:middle
llama al método createView() por nosotros...

00:03:01.246 --> 00:03:02.446 align:middle
¡lo que está muy bien!

00:03:03.386 --> 00:03:07.246 align:middle
Esto también supone otro cambio,
que no es muy perceptible.

00:03:07.816 --> 00:03:12.896 align:middle
Si tienes un error de validación, tu
controlador devolverá ahora una respuesta

00:03:12.896 --> 00:03:16.486 align:middle
con el código de estado 422.

00:03:17.286 --> 00:03:19.686 align:middle
Pero eso no se verá diferente en tu navegador.

00:03:20.346 --> 00:03:25.456 align:middle
Si envío una contraseña demasiado
corta, todo se ve igual...

00:03:25.816 --> 00:03:29.096 align:middle
aunque el código de estado es ahora 422.

00:03:29.996 --> 00:03:32.316 align:middle
Symfony hizo este cambio
por dos razones. Primero...

00:03:32.616 --> 00:03:35.776 align:middle
es técnicamente más correcto

00:03:35.806 --> 00:03:39.996 align:middle
tener un código de estado de error
si hay un error de validación.

00:03:40.816 --> 00:03:46.616 align:middle
Y segundo, si usas Turbo, esto
es necesario para que Turbo sepa

00:03:46.616 --> 00:03:48.316 align:middle
que tu validación del formulario ha fallado.

00:03:48.876 --> 00:03:53.066 align:middle
Eso lo consigues de forma gratuita simplemente
utilizando el nuevo método abreviado.

00:03:53.906 --> 00:03:59.586 align:middle
A continuación, Symfony viene con una bonita y opcional
integración con Docker para el desarrollo local.

00:04:00.336 --> 00:04:03.766 align:middle
Algunas partes de esta integración
han cambiado recientemente.

00:04:04.436 --> 00:04:09.286 align:middle
Veamos cómo podemos utilizar Docker para añadir a nuestra
aplicación un sistema de captura de correos electrónicos

00:04:09.286 --> 00:04:12.156 align:middle
que nos ayudará a probarlos
