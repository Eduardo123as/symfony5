WEBVTT

00:00:01.006 --> 00:00:06.586 align:middle
Al convertirnos al nuevo sistema de seguridad,
nuestras depreciaciones se redujeron mucho.

00:00:07.336 --> 00:00:13.086 align:middle
Si miras lo que queda, uno de ellos
dice El nodo hijo "encoders" en la ruta

00:00:13.086 --> 00:00:17.496 align:middle
"security" está obsoleto, utiliza
en su lugar "password_hashers".

00:00:18.346 --> 00:00:22.916 align:middle
Este es otro cambio que vimos al
actualizar la receta de security-bundle.

00:00:23.676 --> 00:00:26.446 align:middle
Originalmente, teníamos encoders.

00:00:27.056 --> 00:00:31.276 align:middle
Esto le dice a Symfony qué algoritmo
usar para hacer el hash de la contraseña.

00:00:31.916 --> 00:00:35.486 align:middle
Esto ha sido renombrado a password_hashers.

00:00:36.056 --> 00:00:41.266 align:middle
Y en lugar de necesitar nuestra clase personalizada,
siempre podemos usar esta configuración.

00:00:41.936 --> 00:00:47.746 align:middle
Esto dice: Cualquier clase que implemente
PasswordAuthenticatedUserInterface debe utilizar

00:00:47.746 --> 00:00:49.316 align:middle
el algoritmo auto.

00:00:50.216 --> 00:00:51.256 align:middle
Y como toda clase de

00:00:51.426 --> 00:00:54.866 align:middle
usuario con contraseña
implementará esto -incluyendo

00:00:55.276 --> 00:00:58.036 align:middle
nuestra clase- esto nos cubre.

00:00:58.876 --> 00:01:04.686 align:middle
Si antes tenías un algoritmo diferente,
muévelo a esta línea. No queremos

00:01:05.516 --> 00:01:07.846 align:middle
cambiar de algoritmo, sólo eliminar

00:01:08.156 --> 00:01:13.186 align:middle
encoders en favor de password_hashers.
Ahora, en la página principal...

00:01:13.976 --> 00:01:15.806 align:middle
¡tenemos aún menos depreciaciones!

00:01:16.376 --> 00:01:18.216 align:middle
¡Quedan dos! Intentemos conectarnos.

00:01:19.076 --> 00:01:21.886 align:middle
¡Ah! Creo que antes se me escaparon

00:01:22.746 --> 00:01:26.856 align:middle
algunos conflictos en mi diseño base. Vamos
a pasar por encima de ellos y a arreglarlos

00:01:27.446 --> 00:01:29.026 align:middle
. En templates/base.html.twig... sí. Cuando

00:01:29.456 --> 00:01:32.076 align:middle
actualizamos la

00:01:34.036 --> 00:01:41.086 align:middle
receta detwig-bundle, esto entraba en conflicto y no me
di cuenta. Ahora... mucho mejor. Iniciemos la sesión

00:01:41.216 --> 00:01:42.216 align:middle
: tenemos

00:01:42.976 --> 00:01:45.056 align:middle
un usuario llamado

00:01:45.836 --> 00:01:52.956 align:middle
abraca_admin@example.com con contraseña tada.
Inicia sesión y... ¡está vivo! Por cierto,

00:01:53.776 --> 00:01:54.946 align:middle
hablando de "seguridad "

00:01:55.386 --> 00:01:56.626 align:middle
y "cortafuegos",

00:01:57.466 --> 00:02:04.376 align:middle
Symfony incluye un nuevo comando para ayudar
a depurar y visualizar tu cortafuegos. Se

00:02:04.376 --> 00:02:07.506 align:middle
llama, apropiadamente,
debug:firewall. Si lo ejecutas

00:02:08.096 --> 00:02:12.486 align:middle
sin argumentos:

00:02:13.286 --> 00:02:18.786 align:middle
Te dirá los nombres de tu cortafuegos: dev y
main. Vuelve a ejecutarlo con main: ¡Ya está!

00:02:19.646 --> 00:02:23.456 align:middle
Esto nos dice qué autentificadores
tiene este corta fuegos

00:02:24.176 --> 00:02:30.226 align:middle
, qué proveedor de usuarios está utilizando
-aunque nuestra aplicación normalmente sólo tiene

00:02:30.716 --> 00:02:35.806 align:middle
uno- y también el punto de entrada,
que es algo de lo que hablamos en

00:02:36.376 --> 00:02:39.386 align:middle
nuestro tutorial de Seguridad. Bien, pon
una gran marca de verificación junto

00:02:40.346 --> 00:02:44.916 align:middle
a "actualizar la seguridad". A continuación,
vamos a machacar las últimas depreciaciones y a

00:02:45.516 --> 00:02:49.316 align:middle
aprender cómo podemos estar seguros de que no

00:02:49.716 --> 00:02:53.066 align:middle
se nos ha escapado ninguna
